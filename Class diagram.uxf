<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.3.0">
  <zoom_level>10</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>900</x>
      <y>960</y>
      <w>810</w>
      <h>330</h>
    </coordinates>
    <panel_attributes>mazesolver.controller::MazeTool
--
+UpDeltas = new Point(0, -1), RightDeltas = new Point(1, 0), DownDeltas = new Point(0, 1), LeftDeltas = new Point(-1, 0): Point
--
-MazeTool(): ctor
+getValidNeighbors(Maze maze, Point tileToCheck): List&lt;Point&gt;
+isValidForExcavation(Maze maze, Point tileToCheck): boolean
+removeBorderTilesAndTilesOutsideMaze(boolean[][] tiles, List&lt;Point&gt; neighbors): void
+isBorderTile(boolean[][] tiles, Point pointToCheck): boolean
+isOutside(boolean[][] tiles, Point pointToCheck): boolean
+get4NeighborsNSEW(Point pointToGetNeighborsFor): List&lt;Point&gt;
+get4DiagonalNeighbors(Point pointToGetNeighborsFor): List&lt;Point&gt;
+get8Neighbors(Point pointToGetNeighborsFor): List&lt;Point&gt;
+areFilled(boolean[][] tiles, List&lt;Point&gt; tilesToCheck): boolean
+numberOfFilled(boolean[][] tiles, List&lt;Point&gt; tilesToCheck): int
+getLeftRightAndForward(Maze maze, Point currentTile): List&lt;Point&gt;
+getLeftRightAndForward(Direction direction): List&lt;Point&gt;
+getAllDirectionDeltas(): List&lt;Point&gt;
+hasUnconnectedOpenDiagonalNeighbor(Maze maze, Point tileToCheck): boolean
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>550</x>
      <y>290</y>
      <w>470</w>
      <h>260</h>
    </coordinates>
    <panel_attributes>mazesolver.controller::Excavator
--
-maze: Maze
-strategy: ExcavationStrategyIF
--
+Excavator(int width, int height, Point startingPoint, Point endPoint): ctor
+Excavator(Maze maze): ctor
+Excavator(Maze maze, ExcavationStrategyIF strategy): ctor
+getMaze(): Maze
+getCurrentPoint(): Point
+isDone(): boolean
+getTilesToCheck(): List&lt;Point&gt;
+getStrategy(): ExcavationStrategyIF
+setStrategy(ExcavationStrategyIF strategy): void
+excavateNext(): void
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>40</x>
      <y>590</y>
      <w>400</w>
      <h>260</h>
    </coordinates>
    <panel_attributes>/mazesolver.controller.strategies::AbstractExcavationStrategy/
--
-random = new Random(): Random
-maze: Maze
-currentPoint: Point
--
+AbstractExcavationStrategy(Maze mazeToExcavate): ctor
+getCurrentPoint(): Point
#setCurrentPoint(Point currentPoint): void
#getNextPoint(): Point
-setMaze(Maze mazeToExcavate): void
#getMaze(): Maze
#getRandom(): Random
#isValidForExcavation(Point tileToCheck): boolean
+isDone(): boolean</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>550</x>
      <y>70</y>
      <w>470</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>&lt;&lt;interface&gt;&gt;
mazesolver.controller::ExcavatorIF
--

--
~getMaze(): Maze
~getCurrentPoint(): Point
~isDone(): boolean
~getTilesToCheck(): List&lt;Point&gt;
~excavateNext(): void
~setStrategy(ExcavationStrategyIF strategy): void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>40</x>
      <y>70</y>
      <w>400</w>
      <h>160</h>
    </coordinates>
    <panel_attributes>mazesolver.controller::ExcavatorFactory
--
-random = new Random(): Random
--
-ExcavatorFactory(): ctor
+getDepthFirstExcavator(Maze maze): ExcavatorIF
+getBreadthFirstExcavator(Maze maze): ExcavatorIF
+getRandomBreadthFirstExcavator(Maze maze): ExcavatorIF
+getExcavatorWithRandomStrategy(Maze maze): ExcavatorIF</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>60</x>
      <y>410</y>
      <w>360</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>&lt;&lt;interface&gt;&gt;
mazesolver.controller.strategies::ExcavationStrategyIF
--

--
~getTilesToCheck(): List&lt;Point&gt;
~getCurrentPoint(): Point
~excavateNext(): void
~isDone(): boolean</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>550</x>
      <y>590</y>
      <w>420</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>mazesolver.controller.strategies::BreadthFirstExcavationStrategy
--
-tilesToCheck = new ArrayList&lt;Point&gt;(): List&lt;Point&gt;
--
+BreadthFirstExcavationStrategy(Maze mazeToExcavate): ctor
+getTilesToCheck(): List&lt;Point&gt;
+excavateNext(): void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>40</x>
      <y>890</y>
      <w>410</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>mazesolver.controller.strategies::DepthFirstExcavationStrategy
--
-tilesToCheck = new Stack&lt;Point&gt;(): Stack&lt;Point&gt;
--
+DepthFirstExcavationStrategy(Maze mazeToExcavate): ctor
+getTilesToCheck(): List&lt;Point&gt;
+excavateNext(): void
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>530</x>
      <y>770</y>
      <w>470</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>mazesolver.controller.strategies::RandomBreadthFirstExcavationStrategy
--

--
+RandomBreadthFirstExcavationStrategy(Maze mazeToExcavate): ctor
#getNextPoint(): Point</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>230</x>
      <y>540</y>
      <w>30</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;50.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>430</x>
      <y>640</y>
      <w>140</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;120.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>740</x>
      <y>700</y>
      <w>30</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>210</x>
      <y>840</y>
      <w>30</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;50.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>760</x>
      <y>240</y>
      <w>30</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;50.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>410</x>
      <y>450</y>
      <w>160</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;140.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>430</x>
      <y>160</y>
      <w>140</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;.</panel_attributes>
    <additional_attributes>120.0;10.0;10.0;10.0</additional_attributes>
  </element>
</diagram>
